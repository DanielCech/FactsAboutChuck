//
//  {{fileName}}
//  {{projectName}}
//
//  Created by {{author}} on {{date}}.
//  {{copyright}}
//

import Foundation
import RxDataSources
import RxSwift

// Required for Compositional Layout
// Enum which will define the Layout Sections
enum {{name|capitalized}}LayoutSection: Int, CaseIterable {
    case contact
}

// In case you don't need aninatable sections
// for example in forms. we can user `SectionModelType`
// https://github.com/RxSwiftCommunity/RxDataSources

// Required for AnimatableDataSource
// Sections DataSource
enum {{name|capitalized}}Section: AnimatableSectionModelType {
    typealias Identity = String
    typealias Item = {{name|capitalized}}Item

    case contact([Item])

    var items: [Item] {
        switch self {
        case let .contact(items):
            return items.map { $0 }
        }
    }

    init(original: {{name|capitalized}}Section, items: [Item]) {
        switch original {
        case .contact:
            self = .contact(items)
        }
    }

    // Should be a unique identifier per Section
    // in order to animate properly
    var identity: String {
        switch self {
        case .contact:
            return UUID().uuidString
        }
    }

    // Return the specific `LayoutSection` per `Section`
    var layoutSection: {{name|capitalized}}LayoutSection {
        switch self {
        case .contact:
            return .contact
        }
    }
}

// Item
enum {{name|capitalized}}Item: IdentifiableType, Equatable {
    // Should be cellModel here
    case contact(String)

    // Should be a unique identifier per item
    // in order to animate properly
    var identity: String {
        switch self {
        case let .contact(contact):
            return contact
        }
    }
}
